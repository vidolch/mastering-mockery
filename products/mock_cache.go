// Code generated by mockery v2.14.0. DO NOT EDIT.

package products

import mock "github.com/stretchr/testify/mock"

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

// GetProductById provides a mock function with given fields: id
func (_m *MockCache) GetProductById(id string) (bool, Product, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Product
	if rf, ok := ret.Get(1).(func(string) Product); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(Product)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetProduct provides a mock function with given fields: product
func (_m *MockCache) SetProduct(product Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCache(t mockConstructorTestingTNewMockCache) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
